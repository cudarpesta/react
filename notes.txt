1.5 Writing our first react code
codepen.io

card like css:
.person {
  border: 1p solid #eee;
  box-shadow: 0 2px 2px #ccc;
  width: 200px;
  padding: 20px;
}

2.2
let = new way of noting variables
const = use for constant values

jsbin.com

2.3 arrow functions

const myFunc = () => { }
it fixes the issues with the this keyword: so using this inside an arrow function will always keep it's context.

function printMyName(name) {
	console.log(name);
}
MEANS THE SAME AS
const printMyName = (name) => {
	console.log(name);
}

but the parenthesis can be omitted, so:
const printMyName = name => {
	console.log(name);
}

or using a method that return sg in 2 ways:

const doubleMe = (number) => {
  return number*2;
}
MEANS THE SAME AS
const doubleMe = number => number*2;

2.4 exports and imports
you can import the whole content of a file with
import person from './person.js'

or you can import specific functions with the {} curly braces like:
import {baseData} from './utility.js'

or we can give it an alias:
import {baseData as bData} from './utility.js'

or we can import everything with:
import * as bundled from './utility.js'
so it will be accessible like: bundled.baseData, or bundled.clean, etc.

2.5 classes

2.6 classes, properties, methods
in es6, we construct classes with:
constructor() {
	this.myProperty = 'value';
}
HOWEVER in es7, we use
myProperty = 'value'

2.7 SPREAD and REST operators
it is: ... (3 dots)

Spread: 
let oldArray = [1,2,3];
let newArray = [...oldArray, 1,2]

same for the object:
const newObject = {... oldObject, newProp: 5 } // if oldObject has already a newProp, it will be overwritten
without ... [oldArray, 1,2], it would be: [[1,2,3],1,2]

REst: used to merge a list of function arguments into an array

function sortArgs(...args) {
	return args.sort();
}

'===' checks for type and value equality

8. destructuring
array destructuring:
[a,b] = ['Hello','Max'];
[num1, , num3] = [1,2,3]
console.log(a) //hello
console.log(b) // max
console.log(3) // 3

object destructuring:
{name} = {name: 'max', age:28}
console.log(name);

2.9 reference & primitive type
const person = {
	name: 'max'
};

//this creates a real copy of the original person object
const secondPerson = {
	...person
};

2.10 array functions
map()

////////////////////////////////////////////////
3. Understanding the base features and syntax

3.3 using create react app

3.4
public folder is the folder that gets served by the server in the end

ReactDom.render(<App />, 

3.6 understanding jsx

3.7 JSX restrictions
in the return statement of every component, it's a best practice to return one root element

3.8 creating a functional component
a component is just a functions which returns some jsx
a component always starts with a capital char
all lowercase words/elements are reserverd for the html elements

3.9 components & jsx
we can create components in 2 ways:
1. Functional components (also referred to as "presentational", "dumb" or "stateless" components - more about this later in the course) => const cmp = () => { return <div>some JSX</div> } (using ES6 arrow functions as shown here is recommended but optional) -> BEST PRACTICE

2. class-based components (also referred to as "containers", "smart" or "stateful" components) => class Cmp extends Component { render () { return <div>some JSX</div> } } 

3.11
working with props
when using class-based components, the usage of props would be as follows:
class Person extends Component {
	render() {
		return <p>My name is {this.props}</p>
	}
}

3.13 understanding the children prop
in props, there is a special reserverd keyword: children
with props.children we can access a component's children html content, or just the simple element textual content

So this way we can pass params not only through attributes, but via child elements too.

3.14
state is a special property in classes which are extending the Component special class.
Whenever this state property (or it's value) changes , react will re-render the DOM of the component

3.16 Handling events with methods
in basic html a button has an onclick method, in JSX it is called onClick (with capital C). 
IMPORTANT!!
in case of <button onClick={this.switchNameHandler}/> the button onclick method would only run, if the button is clicked.
If it would be {this.switchNamesHandler()}, then the method would be executed when the page is rendered

3.20 using the useState() hooks
useState(INITIAL_STATE, state updating method)

IMPORTANT: the state updating method does not merges the new state (data) with the old one, as instead it replaces it instead

3.21 stateful and stateless component
Stateful comp (smart component, or conatiner component) is a comp, that manages state, 
stateless comp (or presentational or dumb component) is a comp, which has no internal state management

3.22 passing method reference between components
it is a common practice to pass down click handlers (which allow us to change data in the parent component) to child components from parent components.

IMPORTANT
if using () => this.switchNameHandler(), it automatically writes a return in front of this.switchNa....
so if we're using onClick={this.switchNameHandler} , it is equal of using onClick={() => this.switchNameHandler()} , meaning this won't get executed if using () at the end

3.23 adding two way bounding

3.24 adding styling with stylesheets
can import a css into a component file with
import "./Person.css"

3.25 working with inline stylesheets
can create an inlined style json object like:
const style = {
	border: '...',
	padding: '...',
}

then use it in <button style={style}>
IMPORTANT: when adding a button { ... } styling into a component css file, it will have a global effect.
In case of inline styles, the scope is for the current component.

3.27 assignment

/////////////////////////////////////////////////////////////

4. working with lists and conditionals
4.2
inside the jsx code - return, or render part
{ showState ? <div><div> : null }
will render the div part if showState is true, else null

4.3 refactoring the ternary
when the module loads, we render everything in the return's content.
when react decides it needs to re-render the screen, it returns everything inside the render method ( not just the return expression).

after the render, and before the return add js code:
let persons = null;
if(this.state.showPersons) {
<div>
add the content to be shown here
</div>
}

4.5 Outputting lists
after every json object, we can use the .map() function

4.6 Lists & state
add a deletepersonhandler - since it is a list, we need to know which person is to be deleted

we change the persons.map(person) TO persons.map((person, index) ) => ...
using splice, reference: https://www.w3schools.com/jsref/jsref_splice.asp
copies the old array, adding/removing the elements, and returns a new array

4.7 updating state immutably
IMPORTANT: state should be always updated in an immutable fashion. So first create a copy of the original input, modify, then return the new array/object

4.8 lists & keys
A key property is a prop, that react expects to find no matter if it's a custom component, or a default html element, which we render

IMPORTANT
this helps react to update the list efficiently, because react has a virtual dom in the background, to see what "would happen" if the change takes place, and makes a comparison. Based on this comparison, react will only update the dom with the specific modified elements!!

Without a key, react would delete an element, and after that, just re-render the WHOLE LIST, which is very inefficient.  

